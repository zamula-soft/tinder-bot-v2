import os
from dotenv import load_dotenv

from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from classes.gpt import *
from classes.util import *


class TelegramBot:
    def __init__(self):
        self.dialog = Dialog()
        self.gpt_property = GPTProperty(dialog=self.dialog)
        self.date_property = DateProperty(dialog=self.dialog)
        self.messages_property = MessageProperty(dialog=self.dialog)
        self.profile_property = ProfileProperty(dialog=self.dialog)
        self.opener_property = OpenerProperty(dialog=self.dialog)

    async def hello(self, update, context):
        if self.dialog.mode == "gpt":
            await self.gpt_property.gpt_dialog(update, context)
        elif self.dialog.mode == "profile":
            await self.profile_property.profile_dialog(update, context)
        elif self.dialog.mode == "date":
            await self.date_property.date_dialog(update, context)
        elif self.dialog.mode == "opener":
            await self.opener_property.opener_dialog(update, context)
        elif self.dialog.mode == "message":
            await self.messages_property.message_dialog(update, context)
        else:
            await send_text(update, context, "–ü—Ä–∏–≤–µ—Ç!")
            await send_text(update, context, "–ö–∞–∫ –¥–µ–ª–∞, *–¥—Ä—É–∂–∏—â–µ*?")
            await send_text(update, context, "–¢—ã –Ω–∞–ø–∏—Å–∞–ª " + update.message.text)
            await send_photo(update, context, "avatar_main")
            await send_text_buttons(update, context, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å?", {
                "start": "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
                "stop": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
            })

    @staticmethod
    async def hello_button(update, context):
        query = update.callback_query.data
        await update.callback_query.answer()

        if query == "start":
            await send_text(update, context, "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
        else:
            await send_text(update, context, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def start(self, update, context):
        self.dialog.mode = "main"
        text = load_message("main")
        await send_photo(update, context, "main")
        await send_text(update, context, text)
        await show_main_menu(update, context, {
            "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
            "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
            "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT  üß†",
        })

    def add_handlers(self, app):
        """Handlers for telegram."""

        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("gpt", self.gpt_property.gpt))
        app.add_handler(CommandHandler("profile", self.profile_property.profile))
        app.add_handler(CommandHandler("opener", self.opener_property.opener))
        app.add_handler(CommandHandler("date", self.date_property.date))
        app.add_handler(CommandHandler("message", self.messages_property.message))

        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.hello))  # –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã

        app.add_handler(CallbackQueryHandler(self.date_property.date_button, pattern="^date_.*"))
        app.add_handler(CallbackQueryHandler(self.messages_property.message_button, pattern="^message_.*"))

        app.add_handler(CallbackQueryHandler(self.hello_button))


class Property:
    def __init__(self, dialog):
        self.dialog = dialog


class MessageProperty(Property):
    """Message property"""

    async def message(self, update, context):
        self.dialog.mode = "message"
        text = load_message("message")
        await send_photo(update, context, "message")
        await send_text(update, context, text)
        await send_text_buttons(update, context, text, {
            "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
        })
        self.dialog.list.clear()

    async def message_dialog(self, update, context):
        text = update.message.text
        self.dialog.list.append(text)

    async def message_button(self, update, context):
        query = update.callback_query.data
        await update.callback_query.answer()

        prompt = load_prompt(query)
        user_chat_history = "\n\n".join(self.dialog.list)
        my_message = await send_text(update, context, "ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
        answer = await chatgpt.send_question(prompt, user_chat_history)
        await my_message.edit_text(answer)


class DateProperty(Property):
    """Date property of the bot."""

    async def date(self, update, context):
        self.dialog.mode = "date"
        await send_text(update, context, "date")
        text = load_message("date")
        await send_text_buttons(update, context, text, {
            "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya": "–ó–µ–Ω–¥–µ—è",
            "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
        })
        await send_photo(update, context, "date")

    @staticmethod
    async def date_button(update, context):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫
        query = update.callback_query.data
        await update.callback_query.answer()

        await send_photo(update, context, query)
        await send_text(update, context, " –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥–µ–≤—É—à–∫—É (–ø–∞—Ä–Ω—è) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π")

        prompt = load_prompt(query)
        chatgpt.set_prompt(prompt)

        # await send_html(update, context, query)

    @staticmethod
    async def date_dialog(update, context):
        # –î–∏–∞–ª–æ–≥
        text = update.message.text
        my_message = await send_text(update, context, "–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...")
        answer = await chatgpt.add_message(text)
        await my_message.edit_text(answer)


class GPTProperty(Property):
    """GPT Property"""

    async def gpt(self, update, context):
        self.dialog.mode = "gpt"
        await send_photo(update, context, "gpt")
        await send_text(update, context, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ *ChatGPT*:")

    @staticmethod
    async def gpt_dialog(update, context):
        my_message = await send_text(update, context, "ChatGPT –¥—É–º–∞–µ—Ç. –û–∂–∏–¥–∞–π—Ç–µ...")
        prompt = load_prompt("gpt")
        text = update.message.text
        answer = await chatgpt.send_question(prompt, text)
        await my_message.edit_text(answer)


class ProfileProperty(Property):
    """Profile property"""

    async def profile(self, update, context):
        self.dialog.mode = "profile"
        text = load_message("profile")
        await send_photo(update, context, "profile")
        await send_text(update, context, text)

        self.dialog.user.clear()
        self.dialog.count = 0
        await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")

    async def profile_dialog(self, update, context):
        text = update.message.text
        self.dialog.count += 1

        if self.dialog.count == 1:
            self.dialog.user["age"] = text
            await send_text(update, context, "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
        elif self.dialog.count == 2:
            self.dialog.user["occupation"] = text
            await send_text(update, context, "–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
        elif self.dialog.count == 3:
            self.dialog.user["hobby"] = text
            await send_text(update, context, "–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?")
        elif self.dialog.count == 4:
            self.dialog.user["annoys"] = text
            await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
        elif self.dialog.count == 5:
            self.dialog.user["goals"] = text

        prompt = load_prompt("profile")
        user_info = dialog_user_info_to_str(self.dialog.user)
        answer = await chatgpt.send_question(prompt, user_info)
        await send_text(update, context, answer)


class OpenerProperty(Property):
    """Opener profile."""

    async def opener(self, update, context):
        self.dialog.mode = "opener"
        text = load_message("opener")
        await send_photo(update, context, "opener")
        await send_text(update, context, text)

        self.dialog.user.clear()
        self.dialog.count = 0
        await send_text(update, context, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

    async def opener_dialog(self, update, context):
        text = update.message.text
        self.dialog.count += 1

        if self.dialog.count == 1:
            self.dialog.user["name"] = text
            await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç?")
        elif self.dialog.count == 2:
            self.dialog.user["occupation"] = text
            await send_text(update, context, "–í–Ω–µ—à–Ω–æ—Å—Ç—å 1-10 –±–∞–ª–ª–æ–≤?")
        elif self.dialog.count == 3:
            self.dialog.user["hobby"] = text
            await send_text(update, context, "–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?")
        elif self.dialog.count == 4:
            self.dialog.user["annoys"] = text
            await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
        elif self.dialog.count == 5:
            self.dialog.user["goals"] = text

        prompt = load_prompt("opener")
        user_info = dialog_user_info_to_str(self.dialog.user)
        answer = await chatgpt.send_question(prompt, user_info)
        await send_text(update, context, answer)


load_dotenv()

OPEN_API_TOKEN = os.getenv("OPEN_API_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
chatgpt = ChatGptService(token=OPEN_API_TOKEN)
bot = TelegramBot()

app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
bot.add_handlers(app)
app.run_polling()
