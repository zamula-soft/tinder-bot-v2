import os
from dotenv import load_dotenv

from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from classes.gpt import *
from classes.util import *


async def hello(update, context):
    if dialog.mode == "gpt":
        await gpt_dialog(update, context)
    elif dialog.mode == "profile":
        await profile_dialog(update, context)
    elif dialog.mode == "date":
        await date_dialog(update, context)
    elif dialog.mode == "opener":
        await opener_dialog(update, context)
    elif dialog.mode == "message":
        await message_dialog(update, context)
    else:
        await send_text(update, context, "–ü—Ä–∏–≤–µ—Ç!")
        await send_text(update, context, "–ö–∞–∫ –¥–µ–ª–∞, *–¥—Ä—É–∂–∏—â–µ*?")
        await send_text(update, context, "–¢—ã –Ω–∞–ø–∏—Å–∞–ª " + update.message.text)
        await send_photo(update, context, "avatar_main")
        await send_text_buttons(update, context, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å?", {
            "start": "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
            "stop": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        })


async def start(update, context):
    dialog.mode = "main"
    text = load_message("main")
    await send_photo(update, context, "main")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
        "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
        "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
        "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
        "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT  üß†",
    })



# GPT
async def gpt(update, context):
    dialog.mode = "gpt"
    await send_photo(update, context, "gpt")
    await send_text(update, context, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ *ChatGPT*:")


# PROFILE
async def profile(update, context):
    dialog.mode = "profile"
    text = load_message("profile")
    await send_photo(update, context, "profile")
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")


async def opener(update, context):
    dialog.mode = "opener"
    text = load_message("opener")
    await send_photo(update, context, "opener")
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# DATE
async def date(update, context):
    dialog.mode = "date"
    await send_text(update, context, "date")
    text = load_message("date")
    await send_text_buttons(update, context, text, {
        "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
        "date_zendaya": "–ó–µ–Ω–¥–µ—è",
        "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
        "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
    })
    await send_photo(update, context, "date")


async def message(update, context):
    dialog.mode = "message"
    text = load_message("message")
    await send_photo(update, context, "message")
    await send_text(update, context, text)
    await send_text_buttons(update, context, text, {
        "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
    })
    dialog.list.clear()


# dialogs
async def gpt_dialog(update, context):
    my_message = await send_text(update, context, "ChatGPT –¥—É–º–∞–µ—Ç. –û–∂–∏–¥–∞–π—Ç–µ...")
    prompt = load_prompt("gpt")
    text = update.message.text
    answer = await chatgpt.send_question(prompt, text)
    await my_message.edit_text(answer)


# dialogs
async def profile_dialog(update, context):
    text = update.message.text
    dialog.count += 1

    if dialog.count == 1:
        dialog.user["age"] = text
        await send_text(update, context, "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
    elif dialog.count == 2:
        dialog.user["occupation"] = text
        await send_text(update, context, "–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
    elif dialog.count == 3:
        dialog.user["hobby"] = text
        await send_text(update, context, "–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?")
    elif dialog.count == 4:
        dialog.user["annoys"] = text
        await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.count == 5:
        dialog.user["goals"] = text

    prompt = load_prompt("profile")
    user_info = dialog_user_info_to_str(dialog.user)
    answer = await chatgpt.send_question(prompt, user_info)
    await send_text(update, context, answer)


async def opener_dialog(update, context):
    text = update.message.text
    dialog.count += 1

    if dialog.count == 1:
        dialog.user["name"] = text
        await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç?")
    elif dialog.count == 2:
        dialog.user["occupation"] = text
        await send_text(update, context, "–í–Ω–µ—à–Ω–æ—Å—Ç—å 1-10 –±–∞–ª–ª–æ–≤?")
    elif dialog.count == 3:
        dialog.user["hobby"] = text
        await send_text(update, context, "–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?")
    elif dialog.count == 4:
        dialog.user["annoys"] = text
        await send_text(update, context, "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.count == 5:
        dialog.user["goals"] = text

    prompt = load_prompt("opener")
    user_info = dialog_user_info_to_str(dialog.user)
    answer = await chatgpt.send_question(prompt, user_info)
    await send_text(update, context, answer)



async def date_dialog(update, context):
    # –î–∏–∞–ª–æ–≥
    text = update.message.text
    my_message = await send_text(update, context, "–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...")
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)


async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)


# Buttons
async def hello_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    if query == "start":
        await send_text(update, context, "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
    else:
        await send_text(update, context, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def date_button(update, context):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫
    query = update.callback_query.data
    await update.callback_query.answer()

    await send_photo(update, context, query)
    await send_text(update, context, " –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥–µ–≤—É—à–∫—É (–ø–∞—Ä–Ω—è) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π")

    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)

    # await send_html(update, context, query)


async def message_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    prompt = load_prompt(query)
    user_chat_history = "\n\n".join(dialog.list)
    my_message = await send_text(update, context, "ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
    answer = await chatgpt.send_question(prompt, user_chat_history)
    await my_message.edit_text(answer)




load_dotenv()

OPEN_API_TOKEN = os.getenv("OPEN_API_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

dialog = Dialog()


chatgpt = ChatGptService(token=OPEN_API_TOKEN)

app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))  # –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã

app.add_handler(CallbackQueryHandler(date_button, pattern="^date_.*"))
app.add_handler(CallbackQueryHandler(message_button, pattern="^message_.*"))

app.add_handler(CallbackQueryHandler(hello_button))
app.run_polling()
